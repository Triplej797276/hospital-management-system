import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'dart:typed_data';

class ReportsController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Stream<QuerySnapshot> getReportsStream() {
    return _firestore.collection('lab_reports').orderBy('created_at', descending: true).snapshots();
  }

  Future<void> addReport(Map<String, dynamic> reportData) async {
    await _firestore.collection('lab_reports').add({
      ...reportData,
      'created_at': FieldValue.serverTimestamp(),
    });
  }

  Future<void> deleteReport(String docId) async {
    await _firestore.collection('lab_reports').doc(docId).delete();
  }

  Future<Uint8List> generatePdf(Map<String, dynamic> reportData) async {
    final pdf = pw.Document();
    final font = await PdfGoogleFonts.openSansRegular();
    final boldFont = await PdfGoogleFonts.openSansBold();

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        header: (pw.Context context) {
          return pw.Container(
            alignment: pw.Alignment.center,
            margin: const pw.EdgeInsets.only(bottom: 20),
            child: pw.Column(
              children: [
                // Placeholder for logo (replace with actual image if available)
                pw.Container(
                  height: 50,
                  width: 50,
                  decoration: pw.BoxDecoration(
                    border: pw.Border.all(color: PdfColors.black, width: 2),
                  ),
                  child: pw.Center(child: pw.Text('Logo', style: pw.TextStyle(font: font, fontSize: 12))),
                ),
                pw.SizedBox(height: 10),
                pw.Text(
                  'Laboratory Report',
                  style: pw.TextStyle(font: boldFont, fontSize: 24, color: PdfColors.teal),
                ),
                pw.SizedBox(height: 5),
                pw.Text(
                  'Lab Management System',
                  style: pw.TextStyle(font: font, fontSize: 14, color: PdfColors.grey700),
                ),
                pw.Divider(),
              ],
            ),
          );
        },
        footer: (pw.Context context) {
          return pw.Container(
            alignment: pw.Alignment.center,
            margin: const pw.EdgeInsets.only(top: 10),
            child: pw.Row(
              mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
              children: [
                pw.Text(
                  'Generated by Lab Management System',
                  style: pw.TextStyle(font: font, fontSize: 10, color: PdfColors.grey),
                ),
                pw.Text(
                  'Page ${context.pageNumber} of ${context.pagesCount}',
                  style: pw.TextStyle(font: font, fontSize: 10, color: PdfColors.grey),
                ),
              ],
            ),
          );
        },
        build: (pw.Context context) {
          return [
            pw.SizedBox(height: 20),
            pw.Text(
              'Report Details',
              style: pw.TextStyle(font: boldFont, fontSize: 18, color: PdfColors.teal),
            ),
            pw.SizedBox(height: 10),
            pw.Table(
              border: pw.TableBorder.all(color: PdfColors.grey300),
              defaultColumnWidth: const pw.FlexColumnWidth(),
              children: [
                pw.TableRow(
                  decoration: pw.BoxDecoration(color: PdfColors.teal50),
                  children: [
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text('Field', style: pw.TextStyle(font: boldFont, fontSize: 12)),
                    ),
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text('Details', style: pw.TextStyle(font: boldFont, fontSize: 12)),
                    ),
                  ],
                ),
                pw.TableRow(
                  children: [
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text('Patient Name', style: pw.TextStyle(font: font, fontSize: 12)),
                    ),
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text(reportData['patient_name'] ?? 'N/A', style: pw.TextStyle(font: font, fontSize: 12)),
                    ),
                  ],
                ),
                pw.TableRow(
                  children: [
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text('Test Type', style: pw.TextStyle(font: font, fontSize: 12)),
                    ),
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text(reportData['test_type'] ?? 'N/A', style: pw.TextStyle(font: font, fontSize: 12)),
                    ),
                  ],
                ),
                pw.TableRow(
                  children: [
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text('Lab Technician', style: pw.TextStyle(font: font, fontSize: 12)),
                    ),
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text(reportData['lab_technician'] ?? 'N/A', style: pw.TextStyle(font: font, fontSize: 12)),
                    ),
                  ],
                ),
                pw.TableRow(
                  children: [
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text('Date', style: pw.TextStyle(font: font, fontSize: 12)),
                    ),
                    pw.Padding(
                      padding: const pw.EdgeInsets.all(8),
                      child: pw.Text(
                        (reportData['created_at'] as Timestamp?)?.toDate().toString().split(' ')[0] ?? 'N/A',
                        style: pw.TextStyle(font: font, fontSize: 12),
                      ),
                    ),
                  ],
                ),
              ],
            ),
            pw.SizedBox(height: 20),
            pw.Text(
              'Results',
              style: pw.TextStyle(font: boldFont, fontSize: 16, color: PdfColors.teal),
            ),
            pw.SizedBox(height: 10),
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColors.grey300),
              ),
              child: pw.Text(
                reportData['results'] ?? 'No results available.',
                style: pw.TextStyle(font: font, fontSize: 12),
              ),
            ),
          ];
        },
      ),
    );

    return await pdf.save();
  }
}